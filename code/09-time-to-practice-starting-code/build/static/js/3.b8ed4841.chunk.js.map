{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","text","current","value","trim","preventDefault","commentData","quoteID","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","data","addCommentHandler","useCallback","onClick","length","HighlightedQuote","quote","author","QuoteDetail","location","useLocation","match","useRouteMatch","getSingleQuote","commentsPath","url","commentsShown","pathname","buttonText","buttonURL","Fragment","to","path"],"mappings":"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","file":"static/js/3.b8ed4841.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__3JYko\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__LeHkT\",\"loading\":\"NewCommentForm_loading__2nGHE\",\"control\":\"NewCommentForm_control__JzhZO\",\"actions\":\"NewCommentForm_actions__1Dr_p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__1RVtr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__2pmkM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__2NIrf\"};","import { useRef, useEffect } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const { sendRequest, status, error } = useHttp(addComment);\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    const text = commentTextRef.current.value.trim();\n\n    event.preventDefault();\n\n    // optional: Could validate here\n\n    commentTextRef.current.value = '';\n\n    sendRequest({ commentData: {text}, quoteID: props.quoteID});\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {\n        status === 'pending' &&\n        <div className='centered'>\n          <LoadingSpinner />\n        </div>\n      }\n\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useEffect, useState, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from '../comments/CommentsList';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { sendRequest, status, data: comments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(params.quoteID);\n  }, [params.quoteID, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addCommentHandler = useCallback(() => {\n    sendRequest(params.quoteID);\n  }, [sendRequest, params.quoteID]);\n  \n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quoteID={params.quoteID} onAddedComment={addCommentHandler} />}\n      {\n        status === 'pending' &&\n        <div className='centered'>\n          <LoadingSpinner />\n        </div>\n      }\n      {\n        status === 'completed' && comments && comments.length > 0 &&\n        <CommentsList comments={comments} />\n      }\n      {\n        status === 'completed' && (!comments || comments.length === 0) &&\n        <p className='centered'>No comments added yet üôÅ</p>\n      }\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import React, { useEffect } from \"react\";\r\nimport { Link, Route, useParams, useLocation, useRouteMatch } from \"react-router-dom\";\r\nimport Comments from '../components/comments/Comments';\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from '../lib/api';\r\n\r\nfunction QuoteDetail() {\r\n    const params = useParams();\r\n    const location = useLocation();\r\n    const match = useRouteMatch();\r\n    const { sendRequest, status, data: quote, error } = useHttp(getSingleQuote, true);\r\n    const commentsPath = `${match.url}/comments`;\r\n    const commentsShown = commentsPath === location.pathname;\r\n    const buttonText = commentsShown ? 'Hide Comments' : 'Load Comments';\r\n    const buttonURL = commentsShown ? match.url : commentsPath;\r\n\r\n    useEffect(() => {\r\n        sendRequest(params.quoteID);\r\n    }, [sendRequest, params.quoteID]);\r\n\r\n    if (status === 'pending') {\r\n        return (\r\n            <div className='centered'>\r\n                <LoadingSpinner />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (error) {\r\n        return <p className='centered'>{error}</p>\r\n    }\r\n\r\n    if (!quote?.text) {\r\n        return (\r\n            <p>No quote found üôÅ</p>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <HighlightedQuote text={quote.text} author={quote.author} />\r\n\r\n            <div className=\"centered\">\r\n                <Link className=\"btn--flat\" to={buttonURL}>{buttonText}</Link>\r\n            </div>\r\n\r\n            <Route path={commentsPath}>\r\n                <Comments/>\r\n            </Route>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default QuoteDetail;"],"sourceRoot":""}