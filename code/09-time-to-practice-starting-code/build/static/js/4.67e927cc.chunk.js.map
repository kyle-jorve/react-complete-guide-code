{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/AddQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","authorInputRef","useRef","textInputRef","useState","formFilled","setFormFilled","formFilledHandler","event","target","value","trim","length","current","when","message","location","onSubmit","preventDefault","enteredAuthor","enteredText","onAddQuote","author","text","form","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","onChange","rows","actions","onClick","AddQuote","history","useHistory","useHttp","addQuote","sendRequest","status","useEffect","push","data"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,yFCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,yBC8D/BC,EA3DG,SAACL,GACjB,IAAMM,EAAiBC,mBACjBC,EAAeD,mBACrB,EAAoCE,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,SAASC,EAAkBC,GACrBA,EAAMC,OAAOC,MAAMC,OAAOC,OAC5BN,GAAc,GAKmC,IAA/CL,EAAeY,QAAQH,MAAMC,OAAOC,QAA6D,IAA7CT,EAAaU,QAAQH,MAAMC,OAAOC,QACxFN,GAAc,GAIlB,OACE,eAAC,WAAD,WACE,cAAC,IAAD,CAAQQ,KAAMT,EAAYU,QAAS,SAAAC,GAAQ,MAAI,6DAE/C,cAAC,EAAD,UACE,uBAAMC,SA9BZ,SAA2BT,GACzBA,EAAMU,iBAENZ,GAAc,GAEd,IAAMa,EAAgBlB,EAAeY,QAAQH,MACvCU,EAAcjB,EAAaU,QAAQH,MAIzCf,EAAM0B,WAAW,CAAEC,OAAQH,EAAeI,KAAMH,KAoBTxB,UAAWC,IAAQ2B,KAAtD,UACG7B,EAAM8B,WACL,qBAAK7B,UAAWC,IAAQ6B,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAK/B,UAAWC,IAAQ+B,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAK/B,EAAgBgC,SAAU1B,OAEhE,sBAAKX,UAAWC,IAAQ+B,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOG,KAAK,IAAIF,IAAK7B,EAAc8B,SAAU1B,OAE5D,qBAAKX,UAAWC,IAAQsC,QAAxB,SACE,wBAAQC,QAAS,kBAAM9B,GAAc,IAAQV,UAAU,MAAvD,kC,gBC7BGyC,UAtBf,WACI,IAAMC,EAAUC,cAChB,EAAgCC,YAAQC,KAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAYrB,OAVAC,qBAAU,WACS,cAAXD,GACAL,EAAQO,KAAK,aAElB,CAACF,EAAQL,IAOR,eAAC,WAAD,WACI,2CACA,cAAC,EAAD,CAAWb,UAAsB,YAAXkB,EAAsBtB,WAPpD,SAAyByB,GACrBJ,EAAYI","file":"static/js/4.67e927cc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1ntP9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__1nMa_\",\"loading\":\"QuoteForm_loading__3VYSp\",\"control\":\"QuoteForm_control__DWoFV\",\"actions\":\"QuoteForm_actions__21Eyk\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { Fragment, useRef, useState } from 'react';\nimport { Prompt } from 'react-router-dom';\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = (props) => {\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n  const [formFilled, setFormFilled] = useState(false);\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    setFormFilled(false);\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  function formFilledHandler(event) {\n    if (event.target.value.trim().length) {\n      setFormFilled(true);\n\n      return;\n    }\n    \n    if (authorInputRef.current.value.trim().length === 0 && textInputRef.current.value.trim().length === 0) {\n      setFormFilled(false);\n    }\n  }\n\n  return (\n    <Fragment>\n      <Prompt when={formFilled} message={location => 'Are you sure you want to leave? The form will be reset.'} />\n\n      <Card>\n        <form onSubmit={submitFormHandler} className={classes.form}>\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor='author'>Author</label>\n            <input type='text' id='author' ref={authorInputRef} onChange={formFilledHandler} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor='text'>Text</label>\n            <textarea id='text' rows='5' ref={textInputRef} onChange={formFilledHandler}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button onClick={() => setFormFilled(false)} className='btn'>Add Quote</button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { Fragment, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport QuoteForm from '../components/quotes/QuoteForm';\r\nimport useHttp from '../hooks/use-http';\r\nimport { addQuote } from '../lib/api';\r\n\r\nfunction AddQuote() {\r\n    const history = useHistory();\r\n    const { sendRequest, status } = useHttp(addQuote);\r\n\r\n    useEffect(() => {\r\n        if (status === 'completed') {\r\n            history.push('/quotes');\r\n        }\r\n    }, [status, history]);\r\n\r\n    function addQuoteHandler(data) {\r\n        sendRequest(data);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <h1>New Quote</h1>\r\n            <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler} />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default AddQuote;"],"sourceRoot":""}